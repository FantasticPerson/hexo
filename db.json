{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-clean-blog/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/article.styl","path":"css/article.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-clean-blog/LICENSE","hash":"34ac5e147727699d1bbc346b014f2e0bdfbb0947","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/README.md","hash":"4fa53a32f64f081660be607d9ed4f4efa28b3b25","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/_config.yml","hash":"d3366a1c7e3d9e133e3b4632c9b4e1363315fa56","modified":1503977067033},{"_id":"source/_posts/教你瞬间将网站变成桌面应用.md","hash":"fe88b17d873bc13f0de82334df2e3d56b07b18a3","modified":1503977499824},{"_id":"source/_posts/百度地图瓦片下载器.md","hash":"1fb48b6f7b6a2346ac92802a6e48a627eecb7cc5","modified":1503974206666},{"_id":"source/_posts/5分钟上手react.md","hash":"06d0342af5d4f86e80ddf2ed834ac632b8144b54","modified":1477213008085},{"_id":"themes/hexo-theme-clean-blog/languages/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/languages/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/languages/fr.yml","hash":"10e3529b8492d7a7601d5b35b44d8fc9e8ea8d1b","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/languages/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/languages/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/languages/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/languages/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1477104815464},{"_id":"themes/hexo-theme-clean-blog/languages/pt.yml","hash":"6a31d548092af8af9f25d859063b0589c23ce13a","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/languages/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/languages/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/languages/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/archive.ejs","hash":"3c3eaf652efe697fe6bbbcc66c346a98f94fe363","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/index.ejs","hash":"7dfdd9347f14b782d305a70f9ddb696ee1bb3864","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/layout.ejs","hash":"1e718938e7b3cbeb254cf7ce1c0fbe33fa526e98","modified":1477109284214},{"_id":"themes/hexo-theme-clean-blog/layout/page.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/after-footer.ejs","hash":"f199b6e0039a7e9f840b8fbb9971fbd673ba5ce3","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-archive.ejs","hash":"75b9b24c226eda4884752a868177b590d3e8b06f","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-categories.ejs","hash":"b494e4a50f63d66e545da449af18a7198a057bd6","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-full.ejs","hash":"12b8388ca3c729104225e44f247246501c925c14","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-index.ejs","hash":"ad112adf312337c60d436fdd127e948fe81b3dd1","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/article-tags.ejs","hash":"12524df0c1ce5136a8f88cea2fe550f9e1b47b19","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/comments.ejs","hash":"5cafed11b6cfbf22e83674676c0edc6c4420cc0d","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/gallery.ejs","hash":"15e9562d0f6146e25e22856693d1312cd3ade4af","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/footer.ejs","hash":"a11ebe219ea9dc0cc7122fccaf72d84b4443ec9e","modified":1477109467928},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/google-analytics.ejs","hash":"b287b7f66a53b51c7cd872ad1b15dfd20fb3e35d","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/head.ejs","hash":"37ea4dc5154c07b8ab5ed4c13a191da9595e0ad7","modified":1477114657791},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/menu.ejs","hash":"3c51a2a2f950ab2ca80f10d3d3941d5d8cd08ec7","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/source/css/base.styl","hash":"10a3579607a088a13eba8fa6dd66ce348eb56ac7","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/source/css/article.styl","hash":"768418ecaa2ff17f6fa81d72096627e05579fe93","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/source/css/mixins.styl","hash":"cf700a1c1c62b17d35a8f7500bf1a32d9bc6ab6a","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/source/css/style.styl","hash":"7200d572751c1f5888b3d0df25bf503a3f31ca2d","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/source/css/variables.styl","hash":"06e16f64020cbddf2c2c49ef45f940141a1b2ada","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1477104815480},{"_id":"themes/hexo-theme-clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1477104815495},{"_id":"themes/hexo-theme-clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1477104815495},{"_id":"public/2017/08/29/教你瞬间将网站变成桌面应用/index.html","hash":"77a67ccdaa8b587da0d3a0e0d7dae24a3ba287bd","modified":1503977516247},{"_id":"public/2016/10/23/5分钟上手react/index.html","hash":"7bc569abb34b298c5f5e2e641d12495372e0f60f","modified":1503977516247},{"_id":"public/archives/index.html","hash":"8e0fd55f30f022d8be105a47a84a9331124f82bd","modified":1503977516248},{"_id":"public/archives/2016/index.html","hash":"16995dca620de80f9c1e6c61c155f1cf70339508","modified":1503977516248},{"_id":"public/archives/2016/10/index.html","hash":"7a262809dfb970acdbf3ac8a85bd92351dbb9625","modified":1503977516248},{"_id":"public/archives/2017/index.html","hash":"4e9e1ff63f6a8b49bf86390f2d2e0a4884a372da","modified":1503977516249},{"_id":"public/archives/2017/05/index.html","hash":"fc9d4c22a6dc53a08ed756545257b50369f3d055","modified":1503977516249},{"_id":"public/archives/2017/08/index.html","hash":"7c12bb74ac07f2d44afe435518945fcd9ad6019d","modified":1503977516251},{"_id":"public/tags/web/index.html","hash":"5e910155bec6c6a99c3b455febaa8ee28e62255d","modified":1503977516251},{"_id":"public/index.html","hash":"fcc361b2d934cb9bce2a253b40fb40781d335e47","modified":1503977516252},{"_id":"public/2017/05/11/百度地图瓦片下载器/index.html","hash":"5f374b93f2af6d050929fd49c9fd5b37b3da341c","modified":1503977516252},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1503977516255},{"_id":"public/css/article.css","hash":"f0ee490e1207191946fffc9444f891e9b7ae7289","modified":1503977516718},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1503977516718},{"_id":"public/css/base.css","hash":"5bdbdf83ad61e80c537bd75b5442c8b0aac1e0f6","modified":1503977516718},{"_id":"public/css/style.css","hash":"4549fbe615459f12cc2e4f560036f911cd51b121","modified":1503977516718},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503977516718},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1503977516718},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1503977516721}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"教你瞬间将网站变成桌面应用","date":"2017-08-29T06:22:50.000Z","_content":"git地址[packageMaker][3]\n\n动机\n---\n现在es6，es7等等都已经出来了，再使用陈旧的技术显然已经不合适了，但是浏览器的兼容性问题目前还没有办法完全避免，于是electron就派上用场了\n\n运行步骤:\n---\n1.克隆项目\n```\ngit clone\ngit@git@github.com:FantasticPerson/packageMaker2.git\n```\n\n2.进入项目\n```\n进去就是了\n```\n\n3.运行\n```\nnpm run start\n```\n\n简要分析:\n-----\n我目前做的是一个打包工具，使用于windows各个版本\n![此处输入图片的描述][1]\n![此处输入图片的描述][2]\n\n说明:\n-----\n\n1、系统平台选择软件运行的系统，win7或者xp\n2、插件类型，有两种NPAPI，PPAPI，选择你需要使用的插件类型\n\n生成出来的软件可以使用的快捷键\n1、f5刷新\n2、ctrl+r强制刷新\n\n源码分析:\n------\n我懒，你自己去看\n\n[1]:http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic1.png\n[2]:http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic2.png\n[3]:https://github.com/FantasticPerson/packageMaker2","source":"_posts/教你瞬间将网站变成桌面应用.md","raw":"---\ntitle: 教你瞬间将网站变成桌面应用\ndate: 2017-8-29 14:22:50\ntags:\n---\ngit地址[packageMaker][3]\n\n动机\n---\n现在es6，es7等等都已经出来了，再使用陈旧的技术显然已经不合适了，但是浏览器的兼容性问题目前还没有办法完全避免，于是electron就派上用场了\n\n运行步骤:\n---\n1.克隆项目\n```\ngit clone\ngit@git@github.com:FantasticPerson/packageMaker2.git\n```\n\n2.进入项目\n```\n进去就是了\n```\n\n3.运行\n```\nnpm run start\n```\n\n简要分析:\n-----\n我目前做的是一个打包工具，使用于windows各个版本\n![此处输入图片的描述][1]\n![此处输入图片的描述][2]\n\n说明:\n-----\n\n1、系统平台选择软件运行的系统，win7或者xp\n2、插件类型，有两种NPAPI，PPAPI，选择你需要使用的插件类型\n\n生成出来的软件可以使用的快捷键\n1、f5刷新\n2、ctrl+r强制刷新\n\n源码分析:\n------\n我懒，你自己去看\n\n[1]:http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic1.png\n[2]:http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic2.png\n[3]:https://github.com/FantasticPerson/packageMaker2","slug":"教你瞬间将网站变成桌面应用","published":1,"updated":"2017-08-29T03:31:39.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6x1dqbu000044v5lnxw9wcm","content":"<p>git地址<a href=\"https://github.com/FantasticPerson/packageMaker2\" target=\"_blank\" rel=\"external\">packageMaker</a></p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>现在es6，es7等等都已经出来了，再使用陈旧的技术显然已经不合适了，但是浏览器的兼容性问题目前还没有办法完全避免，于是electron就派上用场了</p>\n<h2 id=\"运行步骤\"><a href=\"#运行步骤\" class=\"headerlink\" title=\"运行步骤:\"></a>运行步骤:</h2><p>1.克隆项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone</div><div class=\"line\">git@git@github.com:FantasticPerson/packageMaker2.git</div></pre></td></tr></table></figure></p>\n<p>2.进入项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">进去就是了</div></pre></td></tr></table></figure></p>\n<p>3.运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run start</div></pre></td></tr></table></figure></p>\n<h2 id=\"简要分析\"><a href=\"#简要分析\" class=\"headerlink\" title=\"简要分析:\"></a>简要分析:</h2><p>我目前做的是一个打包工具，使用于windows各个版本<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic1.png\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic2.png\" alt=\"此处输入图片的描述\"></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h2><p>1、系统平台选择软件运行的系统，win7或者xp<br>2、插件类型，有两种NPAPI，PPAPI，选择你需要使用的插件类型</p>\n<p>生成出来的软件可以使用的快捷键<br>1、f5刷新<br>2、ctrl+r强制刷新</p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析:\"></a>源码分析:</h2><p>我懒，你自己去看</p>\n","site":{"data":{}},"excerpt":"","more":"<p>git地址<a href=\"https://github.com/FantasticPerson/packageMaker2\" target=\"_blank\" rel=\"external\">packageMaker</a></p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>现在es6，es7等等都已经出来了，再使用陈旧的技术显然已经不合适了，但是浏览器的兼容性问题目前还没有办法完全避免，于是electron就派上用场了</p>\n<h2 id=\"运行步骤\"><a href=\"#运行步骤\" class=\"headerlink\" title=\"运行步骤:\"></a>运行步骤:</h2><p>1.克隆项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone</div><div class=\"line\">git@git@github.com:FantasticPerson/packageMaker2.git</div></pre></td></tr></table></figure></p>\n<p>2.进入项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">进去就是了</div></pre></td></tr></table></figure></p>\n<p>3.运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run start</div></pre></td></tr></table></figure></p>\n<h2 id=\"简要分析\"><a href=\"#简要分析\" class=\"headerlink\" title=\"简要分析:\"></a>简要分析:</h2><p>我目前做的是一个打包工具，使用于windows各个版本<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic1.png\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog3/pic2.png\" alt=\"此处输入图片的描述\"></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h2><p>1、系统平台选择软件运行的系统，win7或者xp<br>2、插件类型，有两种NPAPI，PPAPI，选择你需要使用的插件类型</p>\n<p>生成出来的软件可以使用的快捷键<br>1、f5刷新<br>2、ctrl+r强制刷新</p>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析:\"></a>源码分析:</h2><p>我懒，你自己去看</p>\n"},{"title":"百度地图瓦片下载器","date":"2017-05-11T03:13:16.000Z","_content":"git地址：[baiduMapDownloader][1]\n\n动机\n---\n前些日子做百度离线地图，需要下载百度地图瓦片图片，在网上找了许多下载器，要么不能用，要么要花钱，要么不花钱的但是给你打上了水印，于是想干脆自己做一个下载器得了\n\n运行步骤：\n---\n1. 克隆项目\n```\ngit clone git@github.com:wdd119/baiduMapDownloader.git\n```\n\n2. 进入项目目录\n```\ncd baiduMapDownloader\n```\n\n3. 运行\n```\nnpm run start\n```\n\n4. 打包\n```\nnpm run build\n```\n\n简要分析：\n-----\n先从网上找到如何生成瓦片下载地址 [百度地图2.0瓦片地址获取][2]\n\n然后结合自己的需求进行写下载的逻辑,具体就不展开分析了。\n```\n/**\n * Created by wdd on 2017/4/13.\n */\nvar fs = require('fs');\nvar http = require('http');\n\nfunction excuteDowload(downloadList){\n    var currentIndex = 0;\n    var totalLength = downloadList.length;\n\n    function getHttpReqCallback(imgSrc, dirName) {\n        var callback = function(res) {\n            console.log(\"request: \" + imgSrc + \" return status: \" + res.statusCode);\n            var contentLength = parseInt(res.headers['content-length']);\n            var fileBuff = [];\n            res.on('data', function (chunk) {\n                var buffer = new Buffer(chunk);\n                fileBuff.push(buffer);\n            });\n            res.on('end', function() {\n                console.log(\"end downloading \" + imgSrc);\n                if (isNaN(contentLength)) {\n                    console.log(imgSrc + \" content length error\");\n                    return;\n                }\n                var totalBuff = Buffer.concat(fileBuff);\n                console.log(\"totalBuff.length = \" + totalBuff.length + \" \" + \"contentLength = \" + contentLength);\n                if (totalBuff.length < contentLength) {\n                    console.log(imgSrc + \" download error, try again\");\n                    startDownloadTask(imgSrc, dirName);\n                    return;\n                }\n                fs.appendFile(dirName, totalBuff, function(err){\n                    if(!err){\n                        currentIndex++;\n                        download();\n                    }\n                });\n            });\n        };\n        return callback;\n    }\n\n    function download(){\n        if(currentIndex < totalLength){\n            var item = downloadList[currentIndex];\n            let fs = require('fs');\n            let path = require('path');\n            if(!fs.existsSync(path.resolve(__dirname,'./download'))){\n                fs.mkdirSync(path.resolve(__dirname,'./download'));\n            }\n            let dirPath = item.path;\n            let dirPathArr = dirPath.split('/');\n            if(!fs.existsSync(path.resolve(__dirname,'./download/'+dirPathArr[0]))){\n                fs.mkdirSync(path.resolve(__dirname,'./download/'+dirPathArr[0]));\n            }\n            if(!fs.existsSync(path.resolve(__dirname,'./download/'+dirPathArr[0]+'/'+dirPathArr[1]))){\n                fs.mkdirSync(path.resolve(__dirname,'./download/'+dirPathArr[0]+'/'+dirPathArr[1]));\n            }\n            let pngPath = path.resolve(__dirname,'./download/'+dirPathArr[0]+'/'+dirPathArr[1]+'/'+dirPathArr[2]);\n            startDownloadTask(item.url,pngPath);\n        }\n    }\n\n    var startDownloadTask = function(imgSrc, dirName) {\n        console.log(\"start downloading \" + imgSrc);\n\n        var req = http.request(imgSrc, getHttpReqCallback(imgSrc, dirName));\n        req.on('error', function(e){\n            console.log(\"request \" + imgSrc + \" error, try again\");\n            startDownloadTask(imgSrc, dirName);\n        });\n        req.end();\n    };\n    download();\n}\n```\n\n最后看一下简陋的界面吧\n-----------\n![此处输入图片的描述][3]\n可以选择下载的层级，然后点击findtiles进行下载\n\n[1]: https://github.com/wdd119/baiduMapDownloader\n[2]: https://my.oschina.net/smzd/blog/628173\n[3]: http://odpdls7ab.bkt.clouddn.com/blog/blog2/1.png","source":"_posts/百度地图瓦片下载器.md","raw":"---\ntitle: 百度地图瓦片下载器\ndate: 2017-05-11 11:13:16\ntags:\n---\ngit地址：[baiduMapDownloader][1]\n\n动机\n---\n前些日子做百度离线地图，需要下载百度地图瓦片图片，在网上找了许多下载器，要么不能用，要么要花钱，要么不花钱的但是给你打上了水印，于是想干脆自己做一个下载器得了\n\n运行步骤：\n---\n1. 克隆项目\n```\ngit clone git@github.com:wdd119/baiduMapDownloader.git\n```\n\n2. 进入项目目录\n```\ncd baiduMapDownloader\n```\n\n3. 运行\n```\nnpm run start\n```\n\n4. 打包\n```\nnpm run build\n```\n\n简要分析：\n-----\n先从网上找到如何生成瓦片下载地址 [百度地图2.0瓦片地址获取][2]\n\n然后结合自己的需求进行写下载的逻辑,具体就不展开分析了。\n```\n/**\n * Created by wdd on 2017/4/13.\n */\nvar fs = require('fs');\nvar http = require('http');\n\nfunction excuteDowload(downloadList){\n    var currentIndex = 0;\n    var totalLength = downloadList.length;\n\n    function getHttpReqCallback(imgSrc, dirName) {\n        var callback = function(res) {\n            console.log(\"request: \" + imgSrc + \" return status: \" + res.statusCode);\n            var contentLength = parseInt(res.headers['content-length']);\n            var fileBuff = [];\n            res.on('data', function (chunk) {\n                var buffer = new Buffer(chunk);\n                fileBuff.push(buffer);\n            });\n            res.on('end', function() {\n                console.log(\"end downloading \" + imgSrc);\n                if (isNaN(contentLength)) {\n                    console.log(imgSrc + \" content length error\");\n                    return;\n                }\n                var totalBuff = Buffer.concat(fileBuff);\n                console.log(\"totalBuff.length = \" + totalBuff.length + \" \" + \"contentLength = \" + contentLength);\n                if (totalBuff.length < contentLength) {\n                    console.log(imgSrc + \" download error, try again\");\n                    startDownloadTask(imgSrc, dirName);\n                    return;\n                }\n                fs.appendFile(dirName, totalBuff, function(err){\n                    if(!err){\n                        currentIndex++;\n                        download();\n                    }\n                });\n            });\n        };\n        return callback;\n    }\n\n    function download(){\n        if(currentIndex < totalLength){\n            var item = downloadList[currentIndex];\n            let fs = require('fs');\n            let path = require('path');\n            if(!fs.existsSync(path.resolve(__dirname,'./download'))){\n                fs.mkdirSync(path.resolve(__dirname,'./download'));\n            }\n            let dirPath = item.path;\n            let dirPathArr = dirPath.split('/');\n            if(!fs.existsSync(path.resolve(__dirname,'./download/'+dirPathArr[0]))){\n                fs.mkdirSync(path.resolve(__dirname,'./download/'+dirPathArr[0]));\n            }\n            if(!fs.existsSync(path.resolve(__dirname,'./download/'+dirPathArr[0]+'/'+dirPathArr[1]))){\n                fs.mkdirSync(path.resolve(__dirname,'./download/'+dirPathArr[0]+'/'+dirPathArr[1]));\n            }\n            let pngPath = path.resolve(__dirname,'./download/'+dirPathArr[0]+'/'+dirPathArr[1]+'/'+dirPathArr[2]);\n            startDownloadTask(item.url,pngPath);\n        }\n    }\n\n    var startDownloadTask = function(imgSrc, dirName) {\n        console.log(\"start downloading \" + imgSrc);\n\n        var req = http.request(imgSrc, getHttpReqCallback(imgSrc, dirName));\n        req.on('error', function(e){\n            console.log(\"request \" + imgSrc + \" error, try again\");\n            startDownloadTask(imgSrc, dirName);\n        });\n        req.end();\n    };\n    download();\n}\n```\n\n最后看一下简陋的界面吧\n-----------\n![此处输入图片的描述][3]\n可以选择下载的层级，然后点击findtiles进行下载\n\n[1]: https://github.com/wdd119/baiduMapDownloader\n[2]: https://my.oschina.net/smzd/blog/628173\n[3]: http://odpdls7ab.bkt.clouddn.com/blog/blog2/1.png","slug":"百度地图瓦片下载器","published":1,"updated":"2017-08-29T02:36:46.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6x1dqc0000144v59331w4tb","content":"<p>git地址：<a href=\"https://github.com/wdd119/baiduMapDownloader\" target=\"_blank\" rel=\"external\">baiduMapDownloader</a></p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>前些日子做百度离线地图，需要下载百度地图瓦片图片，在网上找了许多下载器，要么不能用，要么要花钱，要么不花钱的但是给你打上了水印，于是想干脆自己做一个下载器得了</p>\n<h2 id=\"运行步骤：\"><a href=\"#运行步骤：\" class=\"headerlink\" title=\"运行步骤：\"></a>运行步骤：</h2><ol>\n<li><p>克隆项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:wdd119/baiduMapDownloader.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd baiduMapDownloader</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run start</div></pre></td></tr></table></figure>\n</li>\n<li><p>打包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"简要分析：\"><a href=\"#简要分析：\" class=\"headerlink\" title=\"简要分析：\"></a>简要分析：</h2><p>先从网上找到如何生成瓦片下载地址 <a href=\"https://my.oschina.net/smzd/blog/628173\" target=\"_blank\" rel=\"external\">百度地图2.0瓦片地址获取</a></p>\n<p>然后结合自己的需求进行写下载的逻辑,具体就不展开分析了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by wdd on 2017/4/13.</div><div class=\"line\"> */</div><div class=\"line\">var fs = require(&apos;fs&apos;);</div><div class=\"line\">var http = require(&apos;http&apos;);</div><div class=\"line\"></div><div class=\"line\">function excuteDowload(downloadList)&#123;</div><div class=\"line\">    var currentIndex = 0;</div><div class=\"line\">    var totalLength = downloadList.length;</div><div class=\"line\"></div><div class=\"line\">    function getHttpReqCallback(imgSrc, dirName) &#123;</div><div class=\"line\">        var callback = function(res) &#123;</div><div class=\"line\">            console.log(&quot;request: &quot; + imgSrc + &quot; return status: &quot; + res.statusCode);</div><div class=\"line\">            var contentLength = parseInt(res.headers[&apos;content-length&apos;]);</div><div class=\"line\">            var fileBuff = [];</div><div class=\"line\">            res.on(&apos;data&apos;, function (chunk) &#123;</div><div class=\"line\">                var buffer = new Buffer(chunk);</div><div class=\"line\">                fileBuff.push(buffer);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            res.on(&apos;end&apos;, function() &#123;</div><div class=\"line\">                console.log(&quot;end downloading &quot; + imgSrc);</div><div class=\"line\">                if (isNaN(contentLength)) &#123;</div><div class=\"line\">                    console.log(imgSrc + &quot; content length error&quot;);</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                var totalBuff = Buffer.concat(fileBuff);</div><div class=\"line\">                console.log(&quot;totalBuff.length = &quot; + totalBuff.length + &quot; &quot; + &quot;contentLength = &quot; + contentLength);</div><div class=\"line\">                if (totalBuff.length &lt; contentLength) &#123;</div><div class=\"line\">                    console.log(imgSrc + &quot; download error, try again&quot;);</div><div class=\"line\">                    startDownloadTask(imgSrc, dirName);</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                fs.appendFile(dirName, totalBuff, function(err)&#123;</div><div class=\"line\">                    if(!err)&#123;</div><div class=\"line\">                        currentIndex++;</div><div class=\"line\">                        download();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        return callback;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function download()&#123;</div><div class=\"line\">        if(currentIndex &lt; totalLength)&#123;</div><div class=\"line\">            var item = downloadList[currentIndex];</div><div class=\"line\">            let fs = require(&apos;fs&apos;);</div><div class=\"line\">            let path = require(&apos;path&apos;);</div><div class=\"line\">            if(!fs.existsSync(path.resolve(__dirname,&apos;./download&apos;)))&#123;</div><div class=\"line\">                fs.mkdirSync(path.resolve(__dirname,&apos;./download&apos;));</div><div class=\"line\">            &#125;</div><div class=\"line\">            let dirPath = item.path;</div><div class=\"line\">            let dirPathArr = dirPath.split(&apos;/&apos;);</div><div class=\"line\">            if(!fs.existsSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0])))&#123;</div><div class=\"line\">                fs.mkdirSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if(!fs.existsSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]+&apos;/&apos;+dirPathArr[1])))&#123;</div><div class=\"line\">                fs.mkdirSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]+&apos;/&apos;+dirPathArr[1]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            let pngPath = path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]+&apos;/&apos;+dirPathArr[1]+&apos;/&apos;+dirPathArr[2]);</div><div class=\"line\">            startDownloadTask(item.url,pngPath);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var startDownloadTask = function(imgSrc, dirName) &#123;</div><div class=\"line\">        console.log(&quot;start downloading &quot; + imgSrc);</div><div class=\"line\"></div><div class=\"line\">        var req = http.request(imgSrc, getHttpReqCallback(imgSrc, dirName));</div><div class=\"line\">        req.on(&apos;error&apos;, function(e)&#123;</div><div class=\"line\">            console.log(&quot;request &quot; + imgSrc + &quot; error, try again&quot;);</div><div class=\"line\">            startDownloadTask(imgSrc, dirName);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        req.end();</div><div class=\"line\">    &#125;;</div><div class=\"line\">    download();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"最后看一下简陋的界面吧\"><a href=\"#最后看一下简陋的界面吧\" class=\"headerlink\" title=\"最后看一下简陋的界面吧\"></a>最后看一下简陋的界面吧</h2><p><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog2/1.png\" alt=\"此处输入图片的描述\"><br>可以选择下载的层级，然后点击findtiles进行下载</p>\n","site":{"data":{}},"excerpt":"","more":"<p>git地址：<a href=\"https://github.com/wdd119/baiduMapDownloader\" target=\"_blank\" rel=\"external\">baiduMapDownloader</a></p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>前些日子做百度离线地图，需要下载百度地图瓦片图片，在网上找了许多下载器，要么不能用，要么要花钱，要么不花钱的但是给你打上了水印，于是想干脆自己做一个下载器得了</p>\n<h2 id=\"运行步骤：\"><a href=\"#运行步骤：\" class=\"headerlink\" title=\"运行步骤：\"></a>运行步骤：</h2><ol>\n<li><p>克隆项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git@github.com:wdd119/baiduMapDownloader.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd baiduMapDownloader</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run start</div></pre></td></tr></table></figure>\n</li>\n<li><p>打包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run build</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"简要分析：\"><a href=\"#简要分析：\" class=\"headerlink\" title=\"简要分析：\"></a>简要分析：</h2><p>先从网上找到如何生成瓦片下载地址 <a href=\"https://my.oschina.net/smzd/blog/628173\" target=\"_blank\" rel=\"external\">百度地图2.0瓦片地址获取</a></p>\n<p>然后结合自己的需求进行写下载的逻辑,具体就不展开分析了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by wdd on 2017/4/13.</div><div class=\"line\"> */</div><div class=\"line\">var fs = require(&apos;fs&apos;);</div><div class=\"line\">var http = require(&apos;http&apos;);</div><div class=\"line\"></div><div class=\"line\">function excuteDowload(downloadList)&#123;</div><div class=\"line\">    var currentIndex = 0;</div><div class=\"line\">    var totalLength = downloadList.length;</div><div class=\"line\"></div><div class=\"line\">    function getHttpReqCallback(imgSrc, dirName) &#123;</div><div class=\"line\">        var callback = function(res) &#123;</div><div class=\"line\">            console.log(&quot;request: &quot; + imgSrc + &quot; return status: &quot; + res.statusCode);</div><div class=\"line\">            var contentLength = parseInt(res.headers[&apos;content-length&apos;]);</div><div class=\"line\">            var fileBuff = [];</div><div class=\"line\">            res.on(&apos;data&apos;, function (chunk) &#123;</div><div class=\"line\">                var buffer = new Buffer(chunk);</div><div class=\"line\">                fileBuff.push(buffer);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            res.on(&apos;end&apos;, function() &#123;</div><div class=\"line\">                console.log(&quot;end downloading &quot; + imgSrc);</div><div class=\"line\">                if (isNaN(contentLength)) &#123;</div><div class=\"line\">                    console.log(imgSrc + &quot; content length error&quot;);</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                var totalBuff = Buffer.concat(fileBuff);</div><div class=\"line\">                console.log(&quot;totalBuff.length = &quot; + totalBuff.length + &quot; &quot; + &quot;contentLength = &quot; + contentLength);</div><div class=\"line\">                if (totalBuff.length &lt; contentLength) &#123;</div><div class=\"line\">                    console.log(imgSrc + &quot; download error, try again&quot;);</div><div class=\"line\">                    startDownloadTask(imgSrc, dirName);</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                fs.appendFile(dirName, totalBuff, function(err)&#123;</div><div class=\"line\">                    if(!err)&#123;</div><div class=\"line\">                        currentIndex++;</div><div class=\"line\">                        download();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        return callback;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function download()&#123;</div><div class=\"line\">        if(currentIndex &lt; totalLength)&#123;</div><div class=\"line\">            var item = downloadList[currentIndex];</div><div class=\"line\">            let fs = require(&apos;fs&apos;);</div><div class=\"line\">            let path = require(&apos;path&apos;);</div><div class=\"line\">            if(!fs.existsSync(path.resolve(__dirname,&apos;./download&apos;)))&#123;</div><div class=\"line\">                fs.mkdirSync(path.resolve(__dirname,&apos;./download&apos;));</div><div class=\"line\">            &#125;</div><div class=\"line\">            let dirPath = item.path;</div><div class=\"line\">            let dirPathArr = dirPath.split(&apos;/&apos;);</div><div class=\"line\">            if(!fs.existsSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0])))&#123;</div><div class=\"line\">                fs.mkdirSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if(!fs.existsSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]+&apos;/&apos;+dirPathArr[1])))&#123;</div><div class=\"line\">                fs.mkdirSync(path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]+&apos;/&apos;+dirPathArr[1]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            let pngPath = path.resolve(__dirname,&apos;./download/&apos;+dirPathArr[0]+&apos;/&apos;+dirPathArr[1]+&apos;/&apos;+dirPathArr[2]);</div><div class=\"line\">            startDownloadTask(item.url,pngPath);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var startDownloadTask = function(imgSrc, dirName) &#123;</div><div class=\"line\">        console.log(&quot;start downloading &quot; + imgSrc);</div><div class=\"line\"></div><div class=\"line\">        var req = http.request(imgSrc, getHttpReqCallback(imgSrc, dirName));</div><div class=\"line\">        req.on(&apos;error&apos;, function(e)&#123;</div><div class=\"line\">            console.log(&quot;request &quot; + imgSrc + &quot; error, try again&quot;);</div><div class=\"line\">            startDownloadTask(imgSrc, dirName);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        req.end();</div><div class=\"line\">    &#125;;</div><div class=\"line\">    download();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"最后看一下简陋的界面吧\"><a href=\"#最后看一下简陋的界面吧\" class=\"headerlink\" title=\"最后看一下简陋的界面吧\"></a>最后看一下简陋的界面吧</h2><p><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog2/1.png\" alt=\"此处输入图片的描述\"><br>可以选择下载的层级，然后点击findtiles进行下载</p>\n"},{"title":"5分钟上手react","date":"2016-10-23T07:26:22.000Z","_content":"git地址：[react-starter][1]\n\n运行步骤：\n---\n\n 1. 安装node\n \n 2. 进入项目根目录，运行\n    `npm install`\n    有可能这条命令运行会很慢，我建议先安装 cnpm\n    `npm install cnpm -g`\n    然后再运行\n    `cnpm install`\n\n 3. 运行\n    `npm run dev`\n    通过浏览器打开  http://localhost:3999/#/demoPage\n    下面就是运行效果：\n    ![此处输入图片的描述][2]\n\n好了，上面就是怎么把项目跑起来的全过程！！！\n\n内容分析：\n---\n![此处输入图片的描述][3]\n源代码主要放在web这个目录底下\n\n***下面主要介绍一下 router 和 redux***\n## router ##\n主要看routes这个目录\n![此处输入图片的描述][4]\nindex.js\n![此处输入图片的描述][5]\n`path:'/'`对用渲染的组件为 indexApp ,对应的URL为http://localhost:3999/#/\n`onEnter`：进入这个路由之前需要干什么写在这里面，最后调一下`cb()`真正进入这个路由\n`onLeave`：自然表示的就是离开这个路由之后做的事情\n`childRoutes`：表示当前这个路由底下的子路由\n我们看一下demoPage里面怎么定义的：\n![此处输入图片的描述][6]\n根据里面的定义 http://localhost:3999/#/demoPage 就是子路由对应的URL\n## redux ##\n简单的说redux就是用来管理数据流的一个工具\n首先我们来看两张图\n![此处输入图片的描述][7]\n![此处输入图片的描述][8]\nstore是一个单一对象\n![此处输入图片的描述][9]\n![此处输入图片的描述][10]\n\nactions可以理解为向store传递数据信息\n![此处输入图片的描述][11]\n![此处输入图片的描述][12]\nreducer实际上就是一个函数，根据action来更新state\n![此处输入图片的描述][13]\n![此处输入图片的描述][14]\n通过console里面的log也可以看到\n![此处输入图片的描述][15]\n\n下面看一个具体的例子：\n![此处输入图片的描述][16]\n通过上面这段将数据绑定到当前的组件上面\n![此处输入图片的描述][17]\n上面的log显示title是'origin title'\n所以当前界面显示为\n![此处输入图片的描述][18]\n通过点击按钮  click to change title\n出发dispatch操作 \n![此处输入图片的描述][20]\n此时更新的数据问 'new title' + 当前时间戳\n如底下log所示\n![此处输入图片的描述][19]\n最后界面更新为如下所示：\n![此处输入图片的描述][21]\n\n好的 差不多就这样了吧。。。\n\n\n  [1]: https://github.com/wdd119/react-starter\n  [2]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog1.PNG\n  [3]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog2.PNG\n  [4]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog4.PNG\n  [5]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog3.PNG\n  [6]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog5.PNG\n  [7]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog6.jpg\n  [8]: http://odpdls7ab.bkt.clouddn.com/blog/blog2/blog7.jpg\n  [9]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog9.PNG\n  [10]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog10.PNG\n  [11]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog13.PNG\n  [12]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog14.PNG\n  [13]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog11.PNG\n  [14]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog12.PNG\n  [15]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog15.PNG\n  [16]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog19.PNG\n  [17]: http://odpdls7ab.bkt.clouddn.com/bog/blog1/blog17.PNG\n  [18]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog16.PNG\n  [19]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog22.PNG\n  [20]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog20.PNG\n  [21]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog21.PNG","source":"_posts/5分钟上手react.md","raw":"---\ntitle: 5分钟上手react\ndate: 2016-10-23 15:26:22\ntags: web\n---\ngit地址：[react-starter][1]\n\n运行步骤：\n---\n\n 1. 安装node\n \n 2. 进入项目根目录，运行\n    `npm install`\n    有可能这条命令运行会很慢，我建议先安装 cnpm\n    `npm install cnpm -g`\n    然后再运行\n    `cnpm install`\n\n 3. 运行\n    `npm run dev`\n    通过浏览器打开  http://localhost:3999/#/demoPage\n    下面就是运行效果：\n    ![此处输入图片的描述][2]\n\n好了，上面就是怎么把项目跑起来的全过程！！！\n\n内容分析：\n---\n![此处输入图片的描述][3]\n源代码主要放在web这个目录底下\n\n***下面主要介绍一下 router 和 redux***\n## router ##\n主要看routes这个目录\n![此处输入图片的描述][4]\nindex.js\n![此处输入图片的描述][5]\n`path:'/'`对用渲染的组件为 indexApp ,对应的URL为http://localhost:3999/#/\n`onEnter`：进入这个路由之前需要干什么写在这里面，最后调一下`cb()`真正进入这个路由\n`onLeave`：自然表示的就是离开这个路由之后做的事情\n`childRoutes`：表示当前这个路由底下的子路由\n我们看一下demoPage里面怎么定义的：\n![此处输入图片的描述][6]\n根据里面的定义 http://localhost:3999/#/demoPage 就是子路由对应的URL\n## redux ##\n简单的说redux就是用来管理数据流的一个工具\n首先我们来看两张图\n![此处输入图片的描述][7]\n![此处输入图片的描述][8]\nstore是一个单一对象\n![此处输入图片的描述][9]\n![此处输入图片的描述][10]\n\nactions可以理解为向store传递数据信息\n![此处输入图片的描述][11]\n![此处输入图片的描述][12]\nreducer实际上就是一个函数，根据action来更新state\n![此处输入图片的描述][13]\n![此处输入图片的描述][14]\n通过console里面的log也可以看到\n![此处输入图片的描述][15]\n\n下面看一个具体的例子：\n![此处输入图片的描述][16]\n通过上面这段将数据绑定到当前的组件上面\n![此处输入图片的描述][17]\n上面的log显示title是'origin title'\n所以当前界面显示为\n![此处输入图片的描述][18]\n通过点击按钮  click to change title\n出发dispatch操作 \n![此处输入图片的描述][20]\n此时更新的数据问 'new title' + 当前时间戳\n如底下log所示\n![此处输入图片的描述][19]\n最后界面更新为如下所示：\n![此处输入图片的描述][21]\n\n好的 差不多就这样了吧。。。\n\n\n  [1]: https://github.com/wdd119/react-starter\n  [2]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog1.PNG\n  [3]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog2.PNG\n  [4]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog4.PNG\n  [5]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog3.PNG\n  [6]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog5.PNG\n  [7]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog6.jpg\n  [8]: http://odpdls7ab.bkt.clouddn.com/blog/blog2/blog7.jpg\n  [9]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog9.PNG\n  [10]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog10.PNG\n  [11]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog13.PNG\n  [12]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog14.PNG\n  [13]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog11.PNG\n  [14]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog12.PNG\n  [15]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog15.PNG\n  [16]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog19.PNG\n  [17]: http://odpdls7ab.bkt.clouddn.com/bog/blog1/blog17.PNG\n  [18]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog16.PNG\n  [19]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog22.PNG\n  [20]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog20.PNG\n  [21]: http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog21.PNG","slug":"5分钟上手react","published":1,"updated":"2016-10-23T08:56:48.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6x1dqc5000244v5rcx5wuyr","content":"<p>git地址：<a href=\"https://github.com/wdd119/react-starter\" target=\"_blank\" rel=\"external\">react-starter</a></p>\n<h2 id=\"运行步骤：\"><a href=\"#运行步骤：\" class=\"headerlink\" title=\"运行步骤：\"></a>运行步骤：</h2><ol>\n<li><p>安装node</p>\n</li>\n<li><p>进入项目根目录，运行<br><code>npm install</code><br>有可能这条命令运行会很慢，我建议先安装 cnpm<br><code>npm install cnpm -g</code><br>然后再运行<br><code>cnpm install</code></p>\n</li>\n<li><p>运行<br><code>npm run dev</code><br>通过浏览器打开  <a href=\"http://localhost:3999/#/demoPage\" target=\"_blank\" rel=\"external\">http://localhost:3999/#/demoPage</a><br>下面就是运行效果：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog1.PNG\" alt=\"此处输入图片的描述\"></p>\n</li>\n</ol>\n<p>好了，上面就是怎么把项目跑起来的全过程！！！</p>\n<h2 id=\"内容分析：\"><a href=\"#内容分析：\" class=\"headerlink\" title=\"内容分析：\"></a>内容分析：</h2><p><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog2.PNG\" alt=\"此处输入图片的描述\"><br>源代码主要放在web这个目录底下</p>\n<p><strong><em>下面主要介绍一下 router 和 redux</em></strong></p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p>主要看routes这个目录<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog4.PNG\" alt=\"此处输入图片的描述\"><br>index.js<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog3.PNG\" alt=\"此处输入图片的描述\"><br><code>path:&#39;/&#39;</code>对用渲染的组件为 indexApp ,对应的URL为<a href=\"http://localhost:3999/#/\" target=\"_blank\" rel=\"external\">http://localhost:3999/#/</a><br><code>onEnter</code>：进入这个路由之前需要干什么写在这里面，最后调一下<code>cb()</code>真正进入这个路由<br><code>onLeave</code>：自然表示的就是离开这个路由之后做的事情<br><code>childRoutes</code>：表示当前这个路由底下的子路由<br>我们看一下demoPage里面怎么定义的：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog5.PNG\" alt=\"此处输入图片的描述\"><br>根据里面的定义 <a href=\"http://localhost:3999/#/demoPage\" target=\"_blank\" rel=\"external\">http://localhost:3999/#/demoPage</a> 就是子路由对应的URL</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>简单的说redux就是用来管理数据流的一个工具<br>首先我们来看两张图<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog6.jpg\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog2/blog7.jpg\" alt=\"此处输入图片的描述\"><br>store是一个单一对象<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog9.PNG\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog10.PNG\" alt=\"此处输入图片的描述\"></p>\n<p>actions可以理解为向store传递数据信息<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog13.PNG\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog14.PNG\" alt=\"此处输入图片的描述\"><br>reducer实际上就是一个函数，根据action来更新state<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog11.PNG\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog12.PNG\" alt=\"此处输入图片的描述\"><br>通过console里面的log也可以看到<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog15.PNG\" alt=\"此处输入图片的描述\"></p>\n<p>下面看一个具体的例子：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog19.PNG\" alt=\"此处输入图片的描述\"><br>通过上面这段将数据绑定到当前的组件上面<br><img src=\"http://odpdls7ab.bkt.clouddn.com/bog/blog1/blog17.PNG\" alt=\"此处输入图片的描述\"><br>上面的log显示title是’origin title’<br>所以当前界面显示为<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog16.PNG\" alt=\"此处输入图片的描述\"><br>通过点击按钮  click to change title<br>出发dispatch操作<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog20.PNG\" alt=\"此处输入图片的描述\"><br>此时更新的数据问 ‘new title’ + 当前时间戳<br>如底下log所示<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog22.PNG\" alt=\"此处输入图片的描述\"><br>最后界面更新为如下所示：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog21.PNG\" alt=\"此处输入图片的描述\"></p>\n<p>好的 差不多就这样了吧。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>git地址：<a href=\"https://github.com/wdd119/react-starter\" target=\"_blank\" rel=\"external\">react-starter</a></p>\n<h2 id=\"运行步骤：\"><a href=\"#运行步骤：\" class=\"headerlink\" title=\"运行步骤：\"></a>运行步骤：</h2><ol>\n<li><p>安装node</p>\n</li>\n<li><p>进入项目根目录，运行<br><code>npm install</code><br>有可能这条命令运行会很慢，我建议先安装 cnpm<br><code>npm install cnpm -g</code><br>然后再运行<br><code>cnpm install</code></p>\n</li>\n<li><p>运行<br><code>npm run dev</code><br>通过浏览器打开  <a href=\"http://localhost:3999/#/demoPage\" target=\"_blank\" rel=\"external\">http://localhost:3999/#/demoPage</a><br>下面就是运行效果：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog1.PNG\" alt=\"此处输入图片的描述\"></p>\n</li>\n</ol>\n<p>好了，上面就是怎么把项目跑起来的全过程！！！</p>\n<h2 id=\"内容分析：\"><a href=\"#内容分析：\" class=\"headerlink\" title=\"内容分析：\"></a>内容分析：</h2><p><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog2.PNG\" alt=\"此处输入图片的描述\"><br>源代码主要放在web这个目录底下</p>\n<p><strong><em>下面主要介绍一下 router 和 redux</em></strong></p>\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><p>主要看routes这个目录<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog4.PNG\" alt=\"此处输入图片的描述\"><br>index.js<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog3.PNG\" alt=\"此处输入图片的描述\"><br><code>path:&#39;/&#39;</code>对用渲染的组件为 indexApp ,对应的URL为<a href=\"http://localhost:3999/#/\" target=\"_blank\" rel=\"external\">http://localhost:3999/#/</a><br><code>onEnter</code>：进入这个路由之前需要干什么写在这里面，最后调一下<code>cb()</code>真正进入这个路由<br><code>onLeave</code>：自然表示的就是离开这个路由之后做的事情<br><code>childRoutes</code>：表示当前这个路由底下的子路由<br>我们看一下demoPage里面怎么定义的：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog5.PNG\" alt=\"此处输入图片的描述\"><br>根据里面的定义 <a href=\"http://localhost:3999/#/demoPage\" target=\"_blank\" rel=\"external\">http://localhost:3999/#/demoPage</a> 就是子路由对应的URL</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>简单的说redux就是用来管理数据流的一个工具<br>首先我们来看两张图<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog6.jpg\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog2/blog7.jpg\" alt=\"此处输入图片的描述\"><br>store是一个单一对象<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog9.PNG\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog10.PNG\" alt=\"此处输入图片的描述\"></p>\n<p>actions可以理解为向store传递数据信息<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog13.PNG\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog14.PNG\" alt=\"此处输入图片的描述\"><br>reducer实际上就是一个函数，根据action来更新state<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog11.PNG\" alt=\"此处输入图片的描述\"><br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog12.PNG\" alt=\"此处输入图片的描述\"><br>通过console里面的log也可以看到<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog15.PNG\" alt=\"此处输入图片的描述\"></p>\n<p>下面看一个具体的例子：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog19.PNG\" alt=\"此处输入图片的描述\"><br>通过上面这段将数据绑定到当前的组件上面<br><img src=\"http://odpdls7ab.bkt.clouddn.com/bog/blog1/blog17.PNG\" alt=\"此处输入图片的描述\"><br>上面的log显示title是’origin title’<br>所以当前界面显示为<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog16.PNG\" alt=\"此处输入图片的描述\"><br>通过点击按钮  click to change title<br>出发dispatch操作<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog20.PNG\" alt=\"此处输入图片的描述\"><br>此时更新的数据问 ‘new title’ + 当前时间戳<br>如底下log所示<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog22.PNG\" alt=\"此处输入图片的描述\"><br>最后界面更新为如下所示：<br><img src=\"http://odpdls7ab.bkt.clouddn.com/blog/blog1/blog21.PNG\" alt=\"此处输入图片的描述\"></p>\n<p>好的 差不多就这样了吧。。。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj6x1dqc5000244v5rcx5wuyr","tag_id":"cj6x1dqc8000344v5oj6g97yr","_id":"cj6x1dqce000444v50laxvtpk"}],"Tag":[{"name":"web","_id":"cj6x1dqc8000344v5oj6g97yr"}]}}